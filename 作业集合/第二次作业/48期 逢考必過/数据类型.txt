数据类型
es6 新的写法;
            let x = ``; es6 新的定义方式 模板字符串
            let x = `ture` 字符串
            true 真
            false 假

es6  symbol es6中新增一种

未定义
    let x; (未定义)

常量
    conts 不允许初始不赋值

    conts x = undefined;

es5 有6种
    number  数字 10 10.1  0.3 .3
    string 字符串 一对双引号 或者 一对单引号引起来的内容   转义字符 \    字符串的拼接
    boolean 布尔值 布尔值只包含两个  true  false
                 布尔值就是布尔值，不是0 和 1，0 和 1 是数字，和布尔值没有直接的联系
    null 空的对象指针，具体的应用倒是没什么，但是开发标准上来讲，在定义变量的时候，假设暂时不需要赋值，但是后面会表示一个对象，请给它赋初始值null。
    undefined 任何一个定义出来没有赋值的变量，默认数据都是undefined
    object 对象 (复杂性) 这个我们来详细讲一下，同时也需要重点掌握。
                    对象包含很多很多种类，比如：数组，json，内置对象，节点对象、函数 等等。
                    不管什么对象都可以拥有很多属性的（其他的基础数据类型除了JS规定的属性外，不能再添加独有的属性），这些属性就相当于一个隶属于该对象的变量，也可以用来存储任意数据类型的值。
                    数组 [ ]一种特殊的对象，数据的组合，可以使用 [数字下标] 来取值；

        let x = [10,true,10];数组 对象的一种 / 存储变量
                console.log(y[3]);

        二维数组

        let x = {
            10,

            [
                "20",  true ,false,
            ]
        };

        console.log(x[1][0]);

对象
let x = {
    name : "张三",   "name" 字符串
    age : 20,  年龄,
    marry : true
};
    console.log( x.age);
    json {} 空对象，除了继承JS原本的对象描述外，什么都没有的对象；
                    内置对象 JS已经规定好的对象，例如：document window 等等，太多了；
                    节点对象 这个前面接触的很多了；
                    函数 一个极特殊的对象，可以直接执行来运行内部的代码块。
                    这里我们做简单的了解，后面再详细的讲解每个数据的具体细节信息。

    typeof 操作符
           通过typeof可以用来快速的判断数据的类型，但是注意typeof得到的是一个字符串，也并不是准确的表示该数据的类型，只是方便我们去认识而已。


